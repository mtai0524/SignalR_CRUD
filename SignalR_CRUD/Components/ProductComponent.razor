@page "/product-list"
@using Microsoft.AspNetCore.Components.Web.Extensions
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using SignalR_CRUD.Models
@inject IHubContext<SignalrServer> HubContext

<h3>Product Management</h3>
<p>This component demonstrates fetching data from a service.</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Category</td>
                    <td>
                        <button @onclick="() => EditProduct(product)">Edit</button>
                        <button @onclick="() => DeleteProduct(product)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div>
    <input @bind="newProductName" placeholder="Name" />
    <input @bind="newProductCategory" placeholder="Category" />
    <button @onclick="AddProduct">Add Product</button>
    <button @onclick="NavigateToCreateProduct">Create component</button>
    <button @onclick="UpdateProduct">Update Product</button>
</div>

@code {
    private List<Product> products;
    private string newProductName;
    private string newProductCategory;
    private Product editingProduct;
    private HubConnection hubConnection;

    [Inject]
    private ApplicationDbContext ApplicationDbContext { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/signalrServer"))
            .Build();

        hubConnection.On<List<Product>>("ReceiveProducts", receivedProducts =>
        {
            InvokeAsync(() =>
            {
                products = receivedProducts;
                StateHasChanged();
            });
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started successfully.");
            await LoadProducts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
        }

        await base.OnInitializedAsync();
    }

    private async Task LoadProducts()
    {
        try
        {
            products = ApplicationDbContext.Product.ToList();
            await HubContext.Clients.All.SendAsync("ReceiveProducts", products);
            StateHasChanged(); // Luu data da thay doi
            Console.WriteLine("Products loaded successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
    }




    private void EditProduct(Product product)
    {
        editingProduct = product;
        newProductName = product.Name;
        newProductCategory = product.Category;
    }



    private async Task AddProduct()
    {
        var newProduct = new Product { Name = newProductName, Category = newProductCategory };
        ApplicationDbContext.Product.Add(newProduct);
        await ApplicationDbContext.SaveChangesAsync();

        await hubConnection.SendAsync("LoadProducts");

        ClearForm();
    }

    private async Task UpdateProduct()
    {
        if (editingProduct != null)
        {
            editingProduct.Name = newProductName;
            editingProduct.Category = newProductCategory;
            await ApplicationDbContext.SaveChangesAsync();

            await hubConnection.SendAsync("LoadProducts");

            ClearForm();
        }
    }

    private async Task DeleteProduct(Product product)
    {
        ApplicationDbContext.Product.Remove(product);
        await ApplicationDbContext.SaveChangesAsync();

        await hubConnection.SendAsync("LoadProducts");
    }

    private void ClearForm()
    {
        newProductName = string.Empty;
        newProductCategory = string.Empty;
        editingProduct = null;
    }
    private void NavigateToCreateProduct()
    {
        NavigationManager.NavigateTo("/product-list/createproduct");
    }
}
